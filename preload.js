const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld('electron', {
  login: (username, password, rememberMe, autoLogin) => ipcRenderer.send('login', username, password, rememberMe, autoLogin),
  onLoginResponse: (callback) => ipcRenderer.on('login-response', callback),
  onLoading: (callback) => ipcRenderer.on('loading', callback),
  onUndoLoading: (callback) => ipcRenderer.on('undo-loading', callback),
  setRemUser: () => ipcRenderer.send('set-rem-user'),
  getRemUser: () => ipcRenderer.send('get-rem-user'),
  onGetRemUserResponse: (callback) => ipcRenderer.on('rem-user-response', callback),
  signup: (username, password, confirmPassword) => ipcRenderer.send('signup', username, password, confirmPassword),
  onSignupResponse: (callback) => ipcRenderer.on('signup-response', callback),
  signout: () => ipcRenderer.send('signout', false),
  signoutAndQuit: () => ipcRenderer.send('signout', true),
  sendEmail: (recipient, cc, bcc, subject, body) => ipcRenderer.send('send-email', recipient, cc, bcc, subject, body),
  onSendEmailResponse: (callback) => ipcRenderer.on('send-email-response', callback),
  fillUsername: () => ipcRenderer.send('fill-username'),
  fillEmail: () => ipcRenderer.send('fill-email'),
  fillAppPass: () => ipcRenderer.send('fill-app-pass'),
  fillSentEmails: () => ipcRenderer.send('fill-sent-emails'),
  fillAppPaths: () => ipcRenderer.send('fill-app-paths'),
  fillTasks: () => ipcRenderer.send('fill-tasks'),
  fillUpcomingTasks: () => ipcRenderer.send('fill-upcoming-tasks'),
  onFillUsernameResponse: (callback) => ipcRenderer.on('fill-username-response', callback),
  onFillEmailResponse: (callback) => ipcRenderer.on('fill-email-response', callback),
  onFillAppPassResponse: (callback) => ipcRenderer.on('fill-app-pass-response', callback),
  onFillSentEmailResponse: (callback) => ipcRenderer.on('fill-sent-emails-response', callback),
  onFillAppPathsResponse: (callback) => ipcRenderer.on('fill-app-paths-response', callback),
  onFillTasksResponse: (callback) => ipcRenderer.on('fill-tasks-response', callback),
  onFillUpcomingTasksResponse: (callback) => ipcRenderer.on('fill-upcoming-tasks-response', callback),
  onFillContactsResponse: (callback) => ipcRenderer.on('fill-contacts-response', callback),
  onReqFillSentEmailResponse: (callback) => ipcRenderer.on('req-fill-sent-emails', callback),
  onReqFillAppPathsResponse: (callback) => ipcRenderer.on('req-fill-app-paths', callback),
  onReqFillTasksResponse: (callback) => ipcRenderer.on('req-fill-tasks', callback),
  onReqFillUpcomingTasks: (callback) => ipcRenderer.on('req-fill-upcoming-tasks', callback),
  updateEmail: (newEmail) => ipcRenderer.send('update-email', newEmail),
  updateUsername: (username) => ipcRenderer.send('update-username', username),
  updateAppPassword: (appPassword) => ipcRenderer.send('update-app-password', appPassword),
  updatePassword: (password, confirmPassword) => ipcRenderer.send('update-password', password, confirmPassword),
  updateSignature: (signature) => ipcRenderer.send('update-signature', signature),
  onUpdateInfoResponse: (callback) => ipcRenderer.on('update-info-response', callback),
  sendMessage: (data) => ipcRenderer.send('send-message', data),
  toRenderer: (data) => ipcRenderer.on('to-renderer', data),
  getCurrentlyPlaying: () => ipcRenderer.invoke('get-currently-playing'),
  onGetCurrentlyPlayingResponse: (data) => ipcRenderer.on('get-currently-playing-response', data),
  getWeather: (data) => ipcRenderer.on('get-weather', data),
  getWeatherResponse: (data) => ipcRenderer.send('get-weather-response', data),
  fetchPlaylists: () => ipcRenderer.invoke('fetch-playlists'),
  startPlayback: (uri, uriType) => ipcRenderer.invoke('start-playback', uri, uriType),
  searchTrack: (trackName) => ipcRenderer.invoke('search-track', trackName),
  appendAssistantChat: (data) => ipcRenderer.on('chat-assistant', data),
  appendUserChat: (data) => ipcRenderer.on('chat-user', data),
  volumeChanged: (volume) => ipcRenderer.send('volume-changed', volume),
  voiceChanged: (voice) => ipcRenderer.send('voice-changed', voice)
})